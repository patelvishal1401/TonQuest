#include "imports/stdlib.fc";

;; Constants
const int MIN_TON_FOR_STORAGE = 50000000; ;; 0.05 TON
const int MAX_UINT32 = 4294967295;

;; Op codes
const int op::create_task = 1;
const int op::complete_task = 2;
const int op::claim_reward = 3;

;; Errors
const int error::not_creator = 401;
const int error::task_not_found = 404;
const int error::task_inactive = 403;
const int error::max_participants = 405;
const int error::already_completed = 406;
const int error::insufficient_funds = 407;
const int error::invalid_op = 0xffff;

;; Helper function to compare slices
int slice_equal?(slice a, slice b) inline {
    int len = slice_bits(a);
    if (len != slice_bits(b)) {
        return 0;
    }
    slice ra = a;
    slice rb = b;
    while (len > 0) {
        int n = min(256, len);
        if (ra~load_uint(n) != rb~load_uint(n)) {
            return 0;
        }
        len -= n;
    }
    return -1;  ;; Return -1 for true in FunC
}

;; Helper function to convert address to integer key
int addr_to_key(slice address) inline {
    return slice_hash(address);
}

;; Load contract data
(int, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    if (ds.slice_empty?()) {
        return (0, new_dict(), new_dict());
    }
    return (
        ds~load_uint(32),    ;; task_counter
        ds~load_dict(),      ;; tasks
        ds~load_dict()       ;; completed_tasks
    );
}

;; Save contract data
() save_data(int task_counter, cell tasks, cell completed_tasks) impure inline {
    set_data(
        begin_cell()
            .store_uint(task_counter, 32)
            .store_dict(tasks)
            .store_dict(completed_tasks)
        .end_cell()
    );
}

;; Create task
(int) create_task(slice creator_address, int max_participants, int reward_amount, cell description) impure {
    throw_unless(error::insufficient_funds, reward_amount >= MIN_TON_FOR_STORAGE);
    
    var (task_counter, tasks, completed_tasks) = load_data();
    
    ;; Generate new task ID
    int task_id = task_counter + 1;
    if (task_id > MAX_UINT32) {
        task_id = 1;
    }
    
    ;; Calculate reward per participant
    int reward_per_participant = reward_amount / max_participants;
    
    ;; Store task data
    cell task_data = begin_cell()
        .store_slice(creator_address) 
        .store_uint(task_id, 32)   
        .store_uint(max_participants, 32)
        .store_coins(reward_amount)     ;; Store total reward amount
        .store_coins(reward_per_participant) ;; Store reward per participant
        .store_ref(description)          
        .store_uint(1, 1)                ;; is_active
        .store_uint(0, 32)               ;; current participants
        .end_cell();
    
    tasks~udict_set_ref(32, task_id, task_data);
    save_data(task_id, tasks, completed_tasks);
    
    return task_id;
}

;; Complete task
() complete_task(int task_id, slice participant_address, slice sender_address) impure {
    var (task_counter, tasks, completed_tasks) = load_data();
    
    ;; Load task data
    var (task_cell, found?) = tasks.udict_get_ref?(32, task_id);
    throw_unless(error::task_not_found, found?);
    
    slice task_slice = task_cell.begin_parse();
    slice creator_address = task_slice~load_msg_addr();
    
    ;; Verify sender is task creator
    throw_unless(error::not_creator, slice_equal?(creator_address, sender_address));
    
    int task_id_from_cell = task_slice~load_uint(32);
    int max_participants = task_slice~load_uint(32);
    int total_reward = task_slice~load_coins();
    int reward_per_participant = task_slice~load_coins();
    cell description = task_slice~load_ref();
    int is_active = task_slice~load_uint(1);
    int current_participants = task_slice~load_uint(32);
    
    ;; Validate task is active
    throw_unless(error::task_inactive, is_active);
    
    ;; Check if task is already full
    throw_if(error::max_participants, current_participants >= max_participants);
    
    ;; Check if participant has already completed this task
    int participant_key = addr_to_key(participant_address);
    var (participant_cell, has_tasks?) = completed_tasks.udict_get_ref?(256, participant_key);
    
    if (has_tasks?) {
        slice participant_slice = participant_cell.begin_parse();
        var dict = participant_slice~load_dict();
        var (status_cell, found_status?) = dict.udict_get_ref?(32, task_id);
        throw_if(error::already_completed, found_status?);
    }
    
    ;; Update participant count
    current_participants += 1;
    
    ;; Update active status - keep active if we haven't reached max participants
    int should_remain_active = current_participants < max_participants ? 1 : 0;
    
    ;; Update task data
    cell updated_task = begin_cell()
        .store_slice(creator_address)
        .store_uint(task_id, 32)
        .store_uint(max_participants, 32)
        .store_coins(total_reward)
        .store_coins(reward_per_participant)
        .store_ref(description)
        .store_uint(should_remain_active, 1)
        .store_uint(current_participants, 32)
        .end_cell();
    
    tasks~udict_set_ref(32, task_id, updated_task);
    
    ;; Add to completed tasks for participant
    cell completed_dict = new_dict();
    if (has_tasks?) {
        slice participant_slice = participant_cell.begin_parse();
        completed_dict = participant_slice~load_dict();
    }
    
    completed_dict~udict_set_ref(32, task_id, begin_cell().end_cell());
    completed_tasks~udict_set_ref(256, participant_key, 
        begin_cell().store_dict(completed_dict).end_cell()
    );
    
    save_data(task_counter, tasks, completed_tasks);
}

;; Claim reward
() claim_reward(int task_id, slice sender_addr) impure {
    var (task_counter, tasks, completed_tasks) = load_data();
    
    ;; Load task data and verify reward
    var (task_cell, found?) = tasks.udict_get_ref?(32, task_id);
    throw_unless(error::task_not_found, found?);
    
    ;; Verify task completion
    int sender_key = addr_to_key(sender_addr);
    var (participant_cell, found?) = completed_tasks.udict_get_ref?(256, sender_key);
    throw_unless(error::task_not_found, found?); ;; Error if participant not found
    
    slice participant_slice = participant_cell.begin_parse();
    var dict = participant_slice~load_dict();
    var (status_cell, found_status?) = dict.udict_get_ref?(32, task_id);
    throw_unless(error::task_not_found, found_status?); ;; Error if task completion not found
    
    slice task_slice = task_cell.begin_parse();
    task_slice~load_msg_addr(); ;; skip creator_address
    task_slice~load_uint(32);   ;; skip task_id
    task_slice~load_uint(32);   ;; skip max_participants
    task_slice~load_coins();    ;; skip total reward
    int reward_per_participant = task_slice~load_coins();
    
    ;; Send reward
    var msg = begin_cell()
        .store_uint(0x18, 6)            ;; nobounce
        .store_slice(sender_addr)
        .store_coins(reward_per_participant)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();
    
    send_raw_message(msg, 64); ;; Changed mode to 64 (carry all remaining value)
    
    ;; Remove from completed tasks to prevent claiming twice
    dict~udict_delete?(32, task_id);
    completed_tasks~udict_set_ref(256, sender_key, 
        begin_cell().store_dict(dict).end_cell()
    );
    
    save_data(task_counter, tasks, completed_tasks);
}

;; Get methods

(slice, int, int, int, int, cell, int, int) get_task(int task_id) method_id {
    var (_, tasks, _) = load_data();
    var (task_cell, found?) = tasks.udict_get_ref?(32, task_id);
    throw_unless(error::task_not_found, found?);
    
    slice task_slice = task_cell.begin_parse();
    return (
        task_slice~load_msg_addr(),      ;; creator_address
        task_slice~load_uint(32),        ;; task_id
        task_slice~load_uint(32),        ;; max_participants
        task_slice~load_coins(),         ;; total_reward
        task_slice~load_coins(),         ;; reward_per_participant
        task_slice~load_ref(),           ;; description
        task_slice~load_uint(1),         ;; is_active
        task_slice~load_uint(32)         ;; current_participants
    );
}

cell get_available_tasks() method_id {
    var (_, tasks, _) = load_data();
    return tasks;
}

int get_task_counter() method_id {
    var (task_counter, _, _) = load_data();
    return task_counter;
}

int has_completed_task(slice address, int task_id) method_id {
    var (_, _, completed_tasks) = load_data();
    int addr_key = addr_to_key(address);
    var (participant_cell, found?) = completed_tasks.udict_get_ref?(256, addr_key);
    if (~ found?) {
        return 0;
    }
    slice participant_slice = participant_cell.begin_parse();
    var dict = participant_slice~load_dict();
    var (status_cell, found_status?) = dict.udict_get_ref?(32, task_id);
    return found_status?;
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) {
        return ();
    }
    
    slice sender_addr = cs~load_msg_addr();
    
    int op = in_msg_body~load_uint(32);
    
    if (op == op::create_task) {
        int max_participants = in_msg_body~load_uint(32);
        int reward_amount = msg_value; 
        cell description = in_msg_body~load_ref();
        create_task(sender_addr, max_participants, reward_amount, description);
        return ();
    }
    
    if (op == op::complete_task) {
        int task_id = in_msg_body~load_uint(32);
        slice participant_addr = in_msg_body~load_msg_addr();
        complete_task(task_id, participant_addr, sender_addr);
        return ();
    }
    
    if (op == op::claim_reward) {
        int task_id = in_msg_body~load_uint(32);
        claim_reward(task_id, sender_addr);
        return ();
    }
    
    throw(error::invalid_op);
}